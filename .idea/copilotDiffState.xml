<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/pom.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/pom.xml" />
              <option name="originalContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&#10;&lt;project xmlns=&quot;http://maven.apache.org/POM/4.0.0&quot;&#10;         xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;&#10;         xsi:schemaLocation=&quot;http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd&quot;&gt;&#10;    &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;&#10;&#10;    &lt;groupId&gt;com.example&lt;/groupId&gt;&#10;    &lt;artifactId&gt;PharmacyManagementSystem_QLHT&lt;/artifactId&gt;&#10;    &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt;&#10;    &lt;name&gt;PharmacyManagementSystem_QLHT&lt;/name&gt;&#10;&#10;    &lt;properties&gt;&#10;        &lt;project.build.sourceEncoding&gt;UTF-8&lt;/project.build.sourceEncoding&gt;&#10;        &lt;junit.version&gt;5.12.1&lt;/junit.version&gt;&#10;    &lt;/properties&gt;&#10;    &lt;dependencies&gt;&#10;        &lt;dependency&gt;&#10;            &lt;groupId&gt;com.microsoft.sqlserver&lt;/groupId&gt;&#10;            &lt;artifactId&gt;mssql-jdbc&lt;/artifactId&gt;&#10;            &lt;version&gt;12.6.0.jre11&lt;/version&gt; &lt;!-- Use a version matching your Java version --&gt;&#10;        &lt;/dependency&gt;&#10;        &lt;dependency&gt;&#10;            &lt;groupId&gt;org.openjfx&lt;/groupId&gt;&#10;            &lt;artifactId&gt;javafx-controls&lt;/artifactId&gt;&#10;            &lt;version&gt;22.0.1&lt;/version&gt;&#10;        &lt;/dependency&gt;&#10;        &lt;dependency&gt;&#10;            &lt;groupId&gt;com.microsoft.sqlserver&lt;/groupId&gt;&#10;            &lt;artifactId&gt;mssql-jdbc&lt;/artifactId&gt;&#10;            &lt;version&gt;12.6.0.jre11&lt;/version&gt; &lt;!-- Use a version matching your Java version --&gt;&#10;        &lt;/dependency&gt;&#10;        &lt;dependency&gt;&#10;            &lt;groupId&gt;org.openjfx&lt;/groupId&gt;&#10;            &lt;artifactId&gt;javafx-fxml&lt;/artifactId&gt;&#10;            &lt;version&gt;22.0.1&lt;/version&gt;&#10;        &lt;/dependency&gt;&#10;        &lt;dependency&gt;&#10;            &lt;groupId&gt;com.github.librepdf&lt;/groupId&gt;&#10;            &lt;artifactId&gt;openpdf&lt;/artifactId&gt;&#10;            &lt;version&gt;1.3.30&lt;/version&gt;&#10;        &lt;/dependency&gt;&#10;        &lt;dependency&gt;&#10;            &lt;groupId&gt;org.openjfx&lt;/groupId&gt;&#10;            &lt;artifactId&gt;javafx-web&lt;/artifactId&gt;&#10;            &lt;version&gt;22.0.1&lt;/version&gt;&#10;        &lt;/dependency&gt;&#10;        &lt;dependency&gt;&#10;            &lt;groupId&gt;org.openjfx&lt;/groupId&gt;&#10;            &lt;artifactId&gt;javafx-swing&lt;/artifactId&gt;&#10;            &lt;version&gt;22.0.1&lt;/version&gt;&#10;        &lt;/dependency&gt;&#10;        &lt;dependency&gt;&#10;            &lt;groupId&gt;org.controlsfx&lt;/groupId&gt;&#10;            &lt;artifactId&gt;controlsfx&lt;/artifactId&gt;&#10;            &lt;version&gt;11.2.1&lt;/version&gt;&#10;        &lt;/dependency&gt;&#10;        &lt;dependency&gt;&#10;            &lt;groupId&gt;com.dlsc.formsfx&lt;/groupId&gt;&#10;            &lt;artifactId&gt;formsfx-core&lt;/artifactId&gt;&#10;            &lt;version&gt;11.6.0&lt;/version&gt;&#10;            &lt;exclusions&gt;&#10;                &lt;exclusion&gt;&#10;                    &lt;groupId&gt;org.openjfx&lt;/groupId&gt;&#10;                    &lt;artifactId&gt;*&lt;/artifactId&gt;&#10;                &lt;/exclusion&gt;&#10;            &lt;/exclusions&gt;&#10;        &lt;/dependency&gt;&#10;        &lt;dependency&gt;&#10;            &lt;groupId&gt;net.synedra&lt;/groupId&gt;&#10;            &lt;artifactId&gt;validatorfx&lt;/artifactId&gt;&#10;            &lt;version&gt;0.6.1&lt;/version&gt;&#10;            &lt;exclusions&gt;&#10;                &lt;exclusion&gt;&#10;                    &lt;groupId&gt;org.openjfx&lt;/groupId&gt;&#10;                    &lt;artifactId&gt;*&lt;/artifactId&gt;&#10;                &lt;/exclusion&gt;&#10;            &lt;/exclusions&gt;&#10;        &lt;/dependency&gt;&#10;        &lt;dependency&gt;&#10;            &lt;groupId&gt;org.kordamp.ikonli&lt;/groupId&gt;&#10;            &lt;artifactId&gt;ikonli-javafx&lt;/artifactId&gt;&#10;            &lt;version&gt;12.3.1&lt;/version&gt;&#10;        &lt;/dependency&gt;&#10;        &lt;dependency&gt;&#10;            &lt;groupId&gt;org.kordamp.bootstrapfx&lt;/groupId&gt;&#10;            &lt;artifactId&gt;bootstrapfx-core&lt;/artifactId&gt;&#10;            &lt;version&gt;0.4.0&lt;/version&gt;&#10;        &lt;/dependency&gt;&#10;&#10;        &lt;dependency&gt;&#10;            &lt;groupId&gt;eu.hansolo&lt;/groupId&gt;&#10;            &lt;artifactId&gt;tilesfx&lt;/artifactId&gt;&#10;            &lt;version&gt;21.0.9&lt;/version&gt;&#10;            &lt;exclusions&gt;&#10;                &lt;exclusion&gt;&#10;                    &lt;groupId&gt;org.openjfx&lt;/groupId&gt;&#10;                    &lt;artifactId&gt;*&lt;/artifactId&gt;&#10;                &lt;/exclusion&gt;&#10;            &lt;/exclusions&gt;&#10;        &lt;/dependency&gt;&#10;        &lt;dependency&gt;&#10;            &lt;groupId&gt;org.junit.jupiter&lt;/groupId&gt;&#10;            &lt;artifactId&gt;junit-jupiter-api&lt;/artifactId&gt;&#10;            &lt;version&gt;${junit.version}&lt;/version&gt;&#10;            &lt;scope&gt;test&lt;/scope&gt;&#10;        &lt;/dependency&gt;&#10;        &lt;dependency&gt;&#10;            &lt;groupId&gt;org.junit.jupiter&lt;/groupId&gt;&#10;            &lt;artifactId&gt;junit-jupiter-engine&lt;/artifactId&gt;&#10;            &lt;version&gt;${junit.version}&lt;/version&gt;&#10;            &lt;scope&gt;test&lt;/scope&gt;&#10;        &lt;/dependency&gt;&#10;    &lt;/dependencies&gt;&#10;&#10;    &lt;build&gt;&#10;        &lt;plugins&gt;&#10;            &lt;plugin&gt;&#10;                &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;&#10;                &lt;artifactId&gt;maven-compiler-plugin&lt;/artifactId&gt;&#10;                &lt;version&gt;3.13.0&lt;/version&gt;&#10;                &lt;configuration&gt;&#10;                    &lt;source&gt;22&lt;/source&gt;&#10;                    &lt;target&gt;22&lt;/target&gt;&#10;                &lt;/configuration&gt;&#10;            &lt;/plugin&gt;&#10;            &lt;plugin&gt;&#10;                &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;&#10;                &lt;artifactId&gt;maven-dependency-plugin&lt;/artifactId&gt;&#10;                &lt;version&gt;3.6.1&lt;/version&gt;&#10;                &lt;executions&gt;&#10;                    &lt;execution&gt;&#10;                        &lt;id&gt;download-javafx-docs&lt;/id&gt;&#10;                        &lt;phase&gt;generate-sources&lt;/phase&gt;&#10;                        &lt;goals&gt;&#10;                            &lt;goal&gt;resolve&lt;/goal&gt;&#10;                        &lt;/goals&gt;&#10;                        &lt;configuration&gt;&#10;                            &lt;classifier&gt;javadoc&lt;/classifier&gt;&#10;                        &lt;/configuration&gt;&#10;                    &lt;/execution&gt;&#10;                &lt;/executions&gt;&#10;            &lt;/plugin&gt;&#10;            &lt;plugin&gt;&#10;                &lt;groupId&gt;org.openjfx&lt;/groupId&gt;&#10;                &lt;artifactId&gt;javafx-maven-plugin&lt;/artifactId&gt;&#10;                &lt;version&gt;0.0.8&lt;/version&gt;&#10;                &lt;executions&gt;&#10;                    &lt;execution&gt;&#10;                        &lt;!-- Default configuration for running with: mvn clean javafx:run --&gt;&#10;                        &lt;id&gt;default-cli&lt;/id&gt;&#10;                        &lt;configuration&gt;&#10;                            &lt;mainClass&gt;&#10;                                com.example.pharmacymanagementsystem_qlht/com.example.pharmacymanagementsystem_qlht.HelloApplication&#10;                            &lt;/mainClass&gt;&#10;                            &lt;launcher&gt;app&lt;/launcher&gt;&#10;                            &lt;jlinkZipName&gt;app&lt;/jlinkZipName&gt;&#10;                            &lt;jlinkImageName&gt;app&lt;/jlinkImageName&gt;&#10;                            &lt;noManPages&gt;true&lt;/noManPages&gt;&#10;                            &lt;stripDebug&gt;true&lt;/stripDebug&gt;&#10;                            &lt;noHeaderFiles&gt;true&lt;/noHeaderFiles&gt;&#10;                        &lt;/configuration&gt;&#10;                    &lt;/execution&gt;&#10;                &lt;/executions&gt;&#10;            &lt;/plugin&gt;&#10;        &lt;/plugins&gt;&#10;    &lt;/build&gt;&#10;&lt;/project&gt;" />
              <option name="updatedContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&#10;&lt;project xmlns=&quot;http://maven.apache.org/POM/4.0.0&quot;&#10;         xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;&#10;         xsi:schemaLocation=&quot;http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd&quot;&gt;&#10;    &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;&#10;&#10;    &lt;groupId&gt;com.example&lt;/groupId&gt;&#10;    &lt;artifactId&gt;PharmacyManagementSystem_QLHT&lt;/artifactId&gt;&#10;    &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt;&#10;    &lt;name&gt;PharmacyManagementSystem_QLHT&lt;/name&gt;&#10;&#10;    &lt;properties&gt;&#10;        &lt;project.build.sourceEncoding&gt;UTF-8&lt;/project.build.sourceEncoding&gt;&#10;        &lt;junit.version&gt;5.12.1&lt;/junit.version&gt;&#10;    &lt;/properties&gt;&#10;    &lt;dependencies&gt;&#10;        &lt;dependency&gt;&#10;            &lt;groupId&gt;com.microsoft.sqlserver&lt;/groupId&gt;&#10;            &lt;artifactId&gt;mssql-jdbc&lt;/artifactId&gt;&#10;            &lt;version&gt;12.6.0.jre11&lt;/version&gt; &lt;!-- Use a version matching your Java version --&gt;&#10;        &lt;/dependency&gt;&#10;        &lt;dependency&gt;&#10;            &lt;groupId&gt;org.openjfx&lt;/groupId&gt;&#10;            &lt;artifactId&gt;javafx-controls&lt;/artifactId&gt;&#10;            &lt;version&gt;22.0.1&lt;/version&gt;&#10;        &lt;/dependency&gt;&#10;        &lt;dependency&gt;&#10;            &lt;groupId&gt;com.microsoft.sqlserver&lt;/groupId&gt;&#10;            &lt;artifactId&gt;mssql-jdbc&lt;/artifactId&gt;&#10;            &lt;version&gt;12.6.0.jre11&lt;/version&gt; &lt;!-- Use a version matching your Java version --&gt;&#10;        &lt;/dependency&gt;&#10;        &lt;dependency&gt;&#10;            &lt;groupId&gt;org.openjfx&lt;/groupId&gt;&#10;            &lt;artifactId&gt;javafx-fxml&lt;/artifactId&gt;&#10;            &lt;version&gt;22.0.1&lt;/version&gt;&#10;        &lt;/dependency&gt;&#10;        &lt;dependency&gt;&#10;            &lt;groupId&gt;com.github.librepdf&lt;/groupId&gt;&#10;            &lt;artifactId&gt;openpdf&lt;/artifactId&gt;&#10;            &lt;version&gt;1.3.30&lt;/version&gt;&#10;        &lt;/dependency&gt;&#10;        &lt;dependency&gt;&#10;            &lt;groupId&gt;org.openjfx&lt;/groupId&gt;&#10;            &lt;artifactId&gt;javafx-web&lt;/artifactId&gt;&#10;            &lt;version&gt;22.0.1&lt;/version&gt;&#10;        &lt;/dependency&gt;&#10;        &lt;dependency&gt;&#10;            &lt;groupId&gt;org.openjfx&lt;/groupId&gt;&#10;            &lt;artifactId&gt;javafx-swing&lt;/artifactId&gt;&#10;            &lt;version&gt;22.0.1&lt;/version&gt;&#10;        &lt;/dependency&gt;&#10;        &lt;dependency&gt;&#10;            &lt;groupId&gt;org.controlsfx&lt;/groupId&gt;&#10;            &lt;artifactId&gt;controlsfx&lt;/artifactId&gt;&#10;            &lt;version&gt;11.2.1&lt;/version&gt;&#10;        &lt;/dependency&gt;&#10;        &lt;dependency&gt;&#10;            &lt;groupId&gt;com.dlsc.formsfx&lt;/groupId&gt;&#10;            &lt;artifactId&gt;formsfx-core&lt;/artifactId&gt;&#10;            &lt;version&gt;11.6.0&lt;/version&gt;&#10;            &lt;exclusions&gt;&#10;                &lt;exclusion&gt;&#10;                    &lt;groupId&gt;org.openjfx&lt;/groupId&gt;&#10;                    &lt;artifactId&gt;*&lt;/artifactId&gt;&#10;                &lt;/exclusion&gt;&#10;            &lt;/exclusions&gt;&#10;        &lt;/dependency&gt;&#10;        &lt;dependency&gt;&#10;            &lt;groupId&gt;net.synedra&lt;/groupId&gt;&#10;            &lt;artifactId&gt;validatorfx&lt;/artifactId&gt;&#10;            &lt;version&gt;0.6.1&lt;/version&gt;&#10;            &lt;exclusions&gt;&#10;                &lt;exclusion&gt;&#10;                    &lt;groupId&gt;org.openjfx&lt;/groupId&gt;&#10;                    &lt;artifactId&gt;*&lt;/artifactId&gt;&#10;                &lt;/exclusion&gt;&#10;            &lt;/exclusions&gt;&#10;        &lt;/dependency&gt;&#10;        &lt;dependency&gt;&#10;            &lt;groupId&gt;org.kordamp.ikonli&lt;/groupId&gt;&#10;            &lt;artifactId&gt;ikonli-javafx&lt;/artifactId&gt;&#10;            &lt;version&gt;12.3.1&lt;/version&gt;&#10;        &lt;/dependency&gt;&#10;        &lt;dependency&gt;&#10;            &lt;groupId&gt;org.kordamp.bootstrapfx&lt;/groupId&gt;&#10;            &lt;artifactId&gt;bootstrapfx-core&lt;/artifactId&gt;&#10;            &lt;version&gt;0.4.0&lt;/version&gt;&#10;        &lt;/dependency&gt;&#10;&#10;        &lt;dependency&gt;&#10;            &lt;groupId&gt;eu.hansolo&lt;/groupId&gt;&#10;            &lt;artifactId&gt;tilesfx&lt;/artifactId&gt;&#10;            &lt;version&gt;21.0.9&lt;/version&gt;&#10;            &lt;exclusions&gt;&#10;                &lt;exclusion&gt;&#10;                    &lt;groupId&gt;org.openjfx&lt;/groupId&gt;&#10;                    &lt;artifactId&gt;*&lt;/artifactId&gt;&#10;                &lt;/exclusion&gt;&#10;            &lt;/exclusions&gt;&#10;        &lt;/dependency&gt;&#10;        &lt;dependency&gt;&#10;            &lt;groupId&gt;org.junit.jupiter&lt;/groupId&gt;&#10;            &lt;artifactId&gt;junit-jupiter-api&lt;/artifactId&gt;&#10;            &lt;version&gt;${junit.version}&lt;/version&gt;&#10;            &lt;scope&gt;test&lt;/scope&gt;&#10;        &lt;/dependency&gt;&#10;        &lt;dependency&gt;&#10;            &lt;groupId&gt;org.junit.jupiter&lt;/groupId&gt;&#10;            &lt;artifactId&gt;junit-jupiter-engine&lt;/artifactId&gt;&#10;            &lt;version&gt;${junit.version}&lt;/version&gt;&#10;            &lt;scope&gt;test&lt;/scope&gt;&#10;        &lt;/dependency&gt;&#10;    &lt;/dependencies&gt;&#10;&#10;    &lt;build&gt;&#10;        &lt;plugins&gt;&#10;            &lt;plugin&gt;&#10;                &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;&#10;                &lt;artifactId&gt;maven-compiler-plugin&lt;/artifactId&gt;&#10;                &lt;version&gt;3.13.0&lt;/version&gt;&#10;                &lt;configuration&gt;&#10;                    &lt;source&gt;22&lt;/source&gt;&#10;                    &lt;target&gt;22&lt;/target&gt;&#10;                &lt;/configuration&gt;&#10;            &lt;/plugin&gt;&#10;            &lt;plugin&gt;&#10;                &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;&#10;                &lt;artifactId&gt;maven-dependency-plugin&lt;/artifactId&gt;&#10;                &lt;version&gt;3.6.1&lt;/version&gt;&#10;                &lt;executions&gt;&#10;                    &lt;execution&gt;&#10;                        &lt;id&gt;download-javafx-docs&lt;/id&gt;&#10;                        &lt;phase&gt;generate-sources&lt;/phase&gt;&#10;                        &lt;goals&gt;&#10;                            &lt;goal&gt;resolve&lt;/goal&gt;&#10;                        &lt;/goals&gt;&#10;                        &lt;configuration&gt;&#10;                            &lt;classifier&gt;javadoc&lt;/classifier&gt;&#10;                        &lt;/configuration&gt;&#10;                    &lt;/execution&gt;&#10;                &lt;/executions&gt;&#10;            &lt;/plugin&gt;&#10;            &lt;plugin&gt;&#10;                &lt;groupId&gt;org.openjfx&lt;/groupId&gt;&#10;                &lt;artifactId&gt;javafx-maven-plugin&lt;/artifactId&gt;&#10;                &lt;version&gt;0.0.8&lt;/version&gt;&#10;                &lt;executions&gt;&#10;                    &lt;execution&gt;&#10;                        &lt;!-- Default configuration for running with: mvn clean javafx:run --&gt;&#10;                        &lt;id&gt;default-cli&lt;/id&gt;&#10;                        &lt;configuration&gt;&#10;                            &lt;mainClass&gt;&#10;                                com.example.pharmacymanagementsystem_qlht/com.example.pharmacymanagementsystem_qlht.HelloApplication&#10;                            &lt;/mainClass&gt;&#10;                            &lt;launcher&gt;app&lt;/launcher&gt;&#10;                            &lt;jlinkZipName&gt;app&lt;/jlinkZipName&gt;&#10;                            &lt;jlinkImageName&gt;app&lt;/jlinkImageName&gt;&#10;                            &lt;noManPages&gt;true&lt;/noManPages&gt;&#10;                            &lt;stripDebug&gt;true&lt;/stripDebug&gt;&#10;                            &lt;noHeaderFiles&gt;true&lt;/noHeaderFiles&gt;&#10;                        &lt;/configuration&gt;&#10;                    &lt;/execution&gt;&#10;                &lt;/executions&gt;&#10;            &lt;/plugin&gt;&#10;        &lt;/plugins&gt;&#10;    &lt;/build&gt;&#10;&lt;/project&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/java/com/example/pharmacymanagementsystem_qlht/dao/KhachHang_Dao.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/com/example/pharmacymanagementsystem_qlht/dao/KhachHang_Dao.java" />
              <option name="originalContent" value="package com.example.pharmacymanagementsystem_qlht.dao;&#10;&#10;import com.example.pharmacymanagementsystem_qlht.connectDB.ConnectDB;&#10;import com.example.pharmacymanagementsystem_qlht.model.KhachHang;&#10;&#10;import java.sql.ResultSet;&#10;import java.util.ArrayList;&#10;import java.util.List;&#10;&#10;public class KhachHang_Dao implements DaoInterface&lt;KhachHang&gt; {&#10;&#10;    private final String INSERT_SQL = &quot;INSERT INTO KhachHang (MaKH, TenKH, SDT, Email, NgaySinh, GioiTinh, DiaChi, TrangThai) VALUES (?, ?, ?, ?, ?, ?, ?, ?)&quot;;&#10;    private final String UPDATE_SQL = &quot;UPDATE KhachHang SET TenKH=?, SDT=?, Email=?, NgaySinh=?, GioiTinh=?, DiaChi=? WHERE MaKH=?&quot;;&#10;    private final String DELETE_BY_ID = &quot;DELETE FROM KhachHang WHERE MaKH=?&quot;;&#10;    private final String SELECT_BY_ID = &quot;SELECT * FROM KhachHang WHERE MaKH=?&quot;;&#10;    private final String SELECT_ALL_SQL = &quot;SELECT * FROM KhachHang&quot;;&#10;&#10;    @Override&#10;    public boolean insert(KhachHang e) {&#10;        // ensure default status when inserting&#10;        String tt = e.getTrangThai() == null ? &quot;Hoạt động&quot; : e.getTrangThai();&#10;        // ensure MaKH exists; generate if missing&#10;        if (e.getMaKH() == null || e.getMaKH().trim().isEmpty()) {&#10;            e.setMaKH(generateNewMaKH());&#10;        }&#10;        final int MAX_RETRY = 5;&#10;        int attempt = 0;&#10;        while (attempt &lt; MAX_RETRY) {&#10;            try {&#10;                int rows = ConnectDB.update(INSERT_SQL, e.getMaKH(), e.getTenKH(), e.getSdt(), e.getEmail(), e.getNgaySinh(), e.getGioiTinh(), e.getDiaChi(), tt);&#10;                return rows &gt; 0;&#10;            } catch (RuntimeException ex) {&#10;                attempt++;&#10;                // On duplicate key/PK violation, regenerate MaKH and retry; otherwise rethrow after max attempts&#10;                if (attempt &gt;= MAX_RETRY) {&#10;                    throw ex;&#10;                }&#10;                // generate a new MaKH and retry&#10;                e.setMaKH(generateNewMaKH());&#10;            }&#10;        }&#10;        return false; // unreachable but required by compiler&#10;    }&#10;&#10;    @Override&#10;    public boolean update(KhachHang e) {&#10;        return ConnectDB.update(UPDATE_SQL, e.getTenKH(), e.getSdt(), e.getEmail(), e.getNgaySinh(), e.getGioiTinh(), e.getDiaChi(), e.getMaKH())&gt;0;&#10;    }&#10;&#10;    @Override&#10;    public boolean deleteById(Object... keys) {&#10;        return ConnectDB.update(DELETE_BY_ID, keys)&gt;0;&#10;    }&#10;&#10;    @Override&#10;    public KhachHang selectById(Object... keys) {&#10;        List&lt;KhachHang&gt; list = selectBySql(SELECT_BY_ID, keys);&#10;        if (list.isEmpty()) {&#10;            return null;&#10;    }&#10;        return list.get(0);&#10;    }&#10;&#10;    @Override&#10;    public List&lt;KhachHang&gt; selectBySql(String sql, Object... args) {&#10;        List&lt;KhachHang&gt; list = new ArrayList&lt;&gt;();&#10;        try {&#10;            ResultSet rs = ConnectDB.query(sql, args);&#10;            while (rs.next()) {&#10;                KhachHang kh = new KhachHang();&#10;                kh.setMaKH(rs.getString(&quot;MaKH&quot;));&#10;                kh.setTenKH(rs.getString(&quot;TenKH&quot;));&#10;                kh.setSdt(rs.getString(&quot;SDT&quot;));&#10;                kh.setEmail(rs.getString(&quot;Email&quot;));&#10;                kh.setNgaySinh(rs.getDate(&quot;NgaySinh&quot;));&#10;                kh.setGioiTinh(rs.getString(&quot;GioiTinh&quot;));&#10;                kh.setDiaChi(rs.getString(&quot;DiaChi&quot;));&#10;                // map TrangThai from DB&#10;                kh.setTrangThai(rs.getString(&quot;TrangThai&quot;));&#10;                list.add(kh);&#10;            }&#10;            rs.getStatement().getConnection().close();&#10;        } catch (Exception e) {&#10;            throw new RuntimeException(e);&#10;        }&#10;        return list;&#10;    }&#10;&#10;    /**&#10;     * Refresh customer status based on last purchase:&#10;     * - If customer has a purchase within last 1 year -&gt; 'Kích hoạt'&#10;     * - Else if customer has purchases but last is older than 1 year -&gt; 'Ngưng'&#10;     * - Else (no purchases) -&gt; keep existing TrangThai (do not change)&#10;     */&#10;    public void refreshTrangThai() {&#10;        String sql = &quot;UPDATE KhachHang SET TrangThai = CASE &quot; +&#10;                &quot;WHEN EXISTS (SELECT 1 FROM HoaDon WHERE HoaDon.MaKH = KhachHang.MaKH AND NgayLap &gt;= DATEADD(year, -1, GETDATE())) THEN 'Hoạt động' &quot; +&#10;                &quot;WHEN EXISTS (SELECT 1 FROM HoaDon WHERE HoaDon.MaKH = KhachHang.MaKH) AND NOT EXISTS (SELECT 1 FROM HoaDon WHERE HoaDon.MaKH = KhachHang.MaKH AND NgayLap &gt;= DATEADD(year, -1, GETDATE())) THEN 'Không hoạt động' &quot; +&#10;                &quot;ELSE TrangThai END&quot;;&#10;        ConnectDB.update(sql);&#10;    }&#10;&#10;    @Override&#10;    public List&lt;KhachHang&gt; selectAll() {&#10;        return  this.selectBySql(SELECT_ALL_SQL);&#10;    }&#10;&#10;    /**&#10;     * Generate a new MaKH by taking the last MaKH in descending order and incrementing the numeric suffix.&#10;     * Format: KH%03d (e.g., KH011 -&gt; KH012). If no existing rows, returns KH001.&#10;     */&#10;    public String generateNewMaKH() {&#10;        // Preferred: use SQL Server SEQUENCE if available (atomic and safe under concurrency)&#10;        try {&#10;            String seqSql = &quot;SELECT NEXT VALUE FOR seq_MaKH&quot;;&#10;            java.sql.ResultSet rsSeq = ConnectDB.query(seqSql);&#10;            if (rsSeq.next()) {&#10;                long seqVal = rsSeq.getLong(1);&#10;                rsSeq.getStatement().getConnection().close();&#10;                return String.format(&quot;KH%03d&quot;, seqVal);&#10;            }&#10;            rsSeq.getStatement().getConnection().close();&#10;        } catch (Exception ignore) {&#10;            // Sequence may not exist; fall back to previous method&#10;        }&#10;&#10;        // Fallback: read highest MaKH and increment numeric suffix (works when MaKH formatted as KH###)&#10;        String newMa = &quot;KH001&quot;;&#10;        // Order by numeric suffix of MaKH (substring after 'KH'), safe for values like KH009, KH010, KH100&#10;        String sql = &quot;SELECT TOP 1 MaKH FROM KhachHang ORDER BY TRY_CONVERT(INT, SUBSTRING(MaKH, 3, 100)) DESC&quot;;&#10;        try {&#10;            java.sql.ResultSet rs = ConnectDB.query(sql);&#10;            if (rs.next()) {&#10;                String last = rs.getString(&quot;MaKH&quot;);&#10;                String digits = last == null ? &quot;&quot; : last.replaceAll(&quot;\\D&quot;, &quot;&quot;);&#10;                if (digits.isEmpty()) {&#10;                    newMa = &quot;KH001&quot;;&#10;                } else {&#10;                    int num = Integer.parseInt(digits);&#10;                    num++;&#10;                    newMa = String.format(&quot;KH%03d&quot;, num);&#10;                }&#10;            }&#10;            rs.getStatement().getConnection().close();&#10;        } catch (Exception e) {&#10;            throw new RuntimeException(e);&#10;        }&#10;        return newMa;&#10;    }&#10;}" />
              <option name="updatedContent" value="package com.example.pharmacymanagementsystem_qlht.dao;&#10;&#10;import com.example.pharmacymanagementsystem_qlht.connectDB.ConnectDB;&#10;import com.example.pharmacymanagementsystem_qlht.model.KhachHang;&#10;&#10;import java.sql.ResultSet;&#10;import java.util.ArrayList;&#10;import java.util.List;&#10;&#10;public class KhachHang_Dao implements DaoInterface&lt;KhachHang&gt; {&#10;&#10;    private final String INSERT_SQL = &quot;INSERT INTO KhachHang (MaKH, TenKH, SDT, Email, NgaySinh, GioiTinh, DiaChi, TrangThai) VALUES (?, ?, ?, ?, ?, ?, ?, ?)&quot;;&#10;    private final String UPDATE_SQL = &quot;UPDATE KhachHang SET TenKH=?, SDT=?, Email=?, NgaySinh=?, GioiTinh=?, DiaChi=? WHERE MaKH=?&quot;;&#10;    private final String DELETE_BY_ID = &quot;DELETE FROM KhachHang WHERE MaKH=?&quot;;&#10;    private final String SELECT_BY_ID = &quot;SELECT * FROM KhachHang WHERE MaKH=?&quot;;&#10;    private final String SELECT_ALL_SQL = &quot;SELECT * FROM KhachHang&quot;;&#10;&#10;    @Override&#10;    public boolean insert(KhachHang e) {&#10;        // ensure default status when inserting&#10;        String tt = e.getTrangThai() == null ? &quot;Hoạt động&quot; : e.getTrangThai();&#10;        // ensure MaKH exists; generate if missing&#10;        if (e.getMaKH() == null || e.getMaKH().trim().isEmpty()) {&#10;            e.setMaKH(generateNewMaKH());&#10;        }&#10;        final int MAX_RETRY = 5;&#10;        int attempt = 0;&#10;        while (attempt &lt; MAX_RETRY) {&#10;            try {&#10;                int rows = ConnectDB.update(INSERT_SQL, e.getMaKH(), e.getTenKH(), e.getSdt(), e.getEmail(), e.getNgaySinh(), e.getGioiTinh(), e.getDiaChi(), tt);&#10;                return rows &gt; 0;&#10;            } catch (RuntimeException ex) {&#10;                attempt++;&#10;                // On duplicate key/PK violation, regenerate MaKH and retry; otherwise rethrow after max attempts&#10;                if (attempt &gt;= MAX_RETRY) {&#10;                    throw ex;&#10;                }&#10;                // generate a new MaKH and retry&#10;                e.setMaKH(generateNewMaKH());&#10;            }&#10;        }&#10;        return false; // unreachable but required by compiler&#10;    }&#10;&#10;    @Override&#10;    public boolean update(KhachHang e) {&#10;        return ConnectDB.update(UPDATE_SQL, e.getTenKH(), e.getSdt(), e.getEmail(), e.getNgaySinh(), e.getGioiTinh(), e.getDiaChi(), e.getMaKH())&gt;0;&#10;    }&#10;&#10;    @Override&#10;    public boolean deleteById(Object... keys) {&#10;        return ConnectDB.update(DELETE_BY_ID, keys)&gt;0;&#10;    }&#10;&#10;    @Override&#10;    public KhachHang selectById(Object... keys) {&#10;        List&lt;KhachHang&gt; list = selectBySql(SELECT_BY_ID, keys);&#10;        if (list.isEmpty()) {&#10;            return null;&#10;    }&#10;        return list.get(0);&#10;    }&#10;&#10;    @Override&#10;    public List&lt;KhachHang&gt; selectBySql(String sql, Object... args) {&#10;        List&lt;KhachHang&gt; list = new ArrayList&lt;&gt;();&#10;        try {&#10;            ResultSet rs = ConnectDB.query(sql, args);&#10;            while (rs.next()) {&#10;                KhachHang kh = new KhachHang();&#10;                kh.setMaKH(rs.getString(&quot;MaKH&quot;));&#10;                kh.setTenKH(rs.getString(&quot;TenKH&quot;));&#10;                kh.setSdt(rs.getString(&quot;SDT&quot;));&#10;                kh.setEmail(rs.getString(&quot;Email&quot;));&#10;                kh.setNgaySinh(rs.getDate(&quot;NgaySinh&quot;));&#10;                kh.setGioiTinh(rs.getString(&quot;GioiTinh&quot;));&#10;                kh.setDiaChi(rs.getString(&quot;DiaChi&quot;));&#10;                // map TrangThai from DB&#10;                kh.setTrangThai(rs.getString(&quot;TrangThai&quot;));&#10;                list.add(kh);&#10;            }&#10;            rs.getStatement().getConnection().close();&#10;        } catch (Exception e) {&#10;            throw new RuntimeException(e);&#10;        }&#10;        return list;&#10;    }&#10;&#10;    /**&#10;     * Refresh customer status based on last purchase:&#10;     * - If customer has a purchase within last 1 year -&gt; 'Kích hoạt'&#10;     * - Else if customer has purchases but last is older than 1 year -&gt; 'Ngưng'&#10;     * - Else (no purchases) -&gt; keep existing TrangThai (do not change)&#10;     */&#10;    public void refreshTrangThai() {&#10;        String sql = &quot;UPDATE KhachHang SET TrangThai = CASE &quot; +&#10;                &quot;WHEN EXISTS (SELECT 1 FROM HoaDon WHERE HoaDon.MaKH = KhachHang.MaKH AND NgayLap &gt;= DATEADD(year, -1, GETDATE())) THEN 'Hoạt động' &quot; +&#10;                &quot;WHEN EXISTS (SELECT 1 FROM HoaDon WHERE HoaDon.MaKH = KhachHang.MaKH) AND NOT EXISTS (SELECT 1 FROM HoaDon WHERE HoaDon.MaKH = KhachHang.MaKH AND NgayLap &gt;= DATEADD(year, -1, GETDATE())) THEN 'Không hoạt động' &quot; +&#10;                &quot;ELSE TrangThai END&quot;;&#10;        ConnectDB.update(sql);&#10;    }&#10;&#10;    @Override&#10;    public List&lt;KhachHang&gt; selectAll() {&#10;        return  this.selectBySql(SELECT_ALL_SQL);&#10;    }&#10;&#10;    /**&#10;     * Generate a new MaKH by taking the last MaKH in descending order and incrementing the numeric suffix.&#10;     * Format: KH%03d (e.g., KH011 -&gt; KH012). If no existing rows, returns KH001.&#10;     */&#10;    public String generateNewMaKH() {&#10;        // Preferred: use SQL Server SEQUENCE if available (atomic and safe under concurrency)&#10;        try {&#10;            String seqSql = &quot;SELECT NEXT VALUE FOR seq_MaKH&quot;;&#10;            java.sql.ResultSet rsSeq = ConnectDB.query(seqSql);&#10;            if (rsSeq.next()) {&#10;                long seqVal = rsSeq.getLong(1);&#10;                rsSeq.getStatement().getConnection().close();&#10;                return String.format(&quot;KH%03d&quot;, seqVal);&#10;            }&#10;            rsSeq.getStatement().getConnection().close();&#10;        } catch (Exception ignore) {&#10;            // Sequence may not exist; fall back to previous method&#10;        }&#10;&#10;        // Fallback: read highest MaKH and increment numeric suffix (works when MaKH formatted as KH###)&#10;        String newMa = &quot;KH001&quot;;&#10;        // Order by numeric suffix of MaKH (substring after 'KH'), safe for values like KH009, KH010, KH100&#10;        String sql = &quot;SELECT TOP 1 MaKH FROM KhachHang ORDER BY TRY_CONVERT(INT, SUBSTRING(MaKH, 3, 100)) DESC&quot;;&#10;        try {&#10;            java.sql.ResultSet rs = ConnectDB.query(sql);&#10;            if (rs.next()) {&#10;                String last = rs.getString(&quot;MaKH&quot;);&#10;                String digits = last == null ? &quot;&quot; : last.replaceAll(&quot;\\D&quot;, &quot;&quot;);&#10;                if (digits.isEmpty()) {&#10;                    newMa = &quot;KH001&quot;;&#10;                } else {&#10;                    int num = Integer.parseInt(digits);&#10;                    num++;&#10;                    newMa = String.format(&quot;KH%03d&quot;, num);&#10;                }&#10;            }&#10;            rs.getStatement().getConnection().close();&#10;        } catch (Exception e) {&#10;            throw new RuntimeException(e);&#10;        }&#10;        return newMa;&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>